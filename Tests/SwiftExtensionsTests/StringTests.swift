//
//  StringTests.swift
//  SwiftExtensionsTests
//
//  Created by Tatsuya Tanaka on 20171217.
//  Copyright ¬© 2017Âπ¥ tattn. All rights reserved.
//

import XCTest
import SwiftExtensions

class StringTests: XCTestCase {

    func testLocalized() {
        XCTAssertEqual("hello".localized, "hello")
//        UserDefaults.standard.set(["ja"], forKey: "AppleLanguages")
//        UserDefaults.standard.synchronize()
//        XCTAssertEqual("hello".localized, "„Åì„Çì„Å´„Å°„ÅØ")
    }
}

extension StringTests {
    func testUrl() {
        let string = "https://example.com"
        XCTAssertEqual(string.url, URL(string: "https://example.com")!)
    }

    func testUrlNil() {
        let string = "üê±"
        XCTAssertNil(string.url)
    }
}

extension StringTests {
    func testRangeSubscript() {
        let string = "0123456789"
        XCTAssertEqual(string[0...5], "012345")
        XCTAssertEqual(string[1...3], "123")
        XCTAssertEqual(string[3..<7], "3456")
        XCTAssertEqual(string[...4], "01234")
        XCTAssertEqual(string[..<4], "0123")
        XCTAssertEqual(string[4...], "456789")
    }
}

extension StringTests {
    func testHalfWidthFullNumberToHalf() {
        let target = "ÔºëÔºíÔºì"
        let expected = "123"
        XCTAssertEqual(expected, target.halfWidth)
    }

    func testHalfWidthHalfNumberToHalf() {
        let target = "12345"
        let expected = "12345"
        XCTAssertEqual(expected, target.halfWidth)
    }

    func testHalfWidthFullAlphabetToHalf() {
        let target = "Ôº°Ôº¢Ôº£Ôº§"
        let expected = "ABCD"
        XCTAssertEqual(expected, target.halfWidth)
    }

    func testHalfWidthHalfAlphabetToHalf() {
        let target = "ABCD"
        let answer = "ABCD"
        XCTAssertEqual(answer, target.halfWidth, "ÂçäËßíËã±Â≠ó„ÅåÂçäËßíËã±Â≠ó„Å´„Å™„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç")
    }

    func testHalfWidthFullAlphabetAndNumberToHalf() {
        let target = "ÔºëÔºíÔº°Ôº¢"
        let expected = "12AB"
        XCTAssertEqual(expected, target.halfWidth)
    }

    func testHalfWidthHalfOrFullAlphabetAndNumberToHalf() {
        let target = "ÔºëÔºí3Ôº°Ôº¢cde"
        let expected = "123ABcde"
        XCTAssertEqual(expected, target.halfWidth)
    }

    func testHalfWidth„Å≤„Çâ„Åå„Å™To„Å≤„Çâ„Åå„Å™() {
        let target = "„ÅÇ„ÅÑ„ÅÜ„Åà„Åä"
        let expected = "„ÅÇ„ÅÑ„ÅÜ„Åà„Åä"
        XCTAssertEqual(expected, target.halfWidth)
    }

    func testFullWidthHalfNumberToFull() {
        let target = "123"
        let expected = "ÔºëÔºíÔºì"
        XCTAssertEqual(expected, target.fullWidth)
    }

    func testFullWidthFullNumberToFull() {
        let target = "ÔºëÔºíÔºìÔºîÔºï"
        let expected = "ÔºëÔºíÔºìÔºîÔºï"
        XCTAssertEqual(expected, target.fullWidth)
    }

    func testFullWidthHalfAlphabetToFull() {
        let target = "ABCD"
        let expected = "Ôº°Ôº¢Ôº£Ôº§"
        XCTAssertEqual(expected, target.fullWidth)
    }

    func testFullWidthFullAlphabetToFull() {
        let target = "Ôº°Ôº¢Ôº£Ôº§"
        let expected = "Ôº°Ôº¢Ôº£Ôº§"
        XCTAssertEqual(expected, target.fullWidth)
    }

    func testFullWidthHalfAlphabetAndNumberToFull() {
        let target = "12AB"
        let expected = "ÔºëÔºíÔº°Ôº¢"
        XCTAssertEqual(expected, target.fullWidth)
    }

    func testFullWidthFullOrHalfAlphabetAndNumberToFull() {
        let target = "ÔºëÔºí3ABcde"
        let expected = "ÔºëÔºíÔºìÔº°Ôº¢ÔΩÉÔΩÑÔΩÖ"
        XCTAssertEqual(expected, target.fullWidth)
    }

    func testFullWidth„Å≤„Çâ„Åå„Å™To„Å≤„Çâ„Åå„Å™() {
        let target = "„ÅÇ„ÅÑ„ÅÜ„Åà„Åä"
        let expected = "„ÅÇ„ÅÑ„ÅÜ„Åà„Åä"
        XCTAssertEqual(expected, target.fullWidth)
    }
}
